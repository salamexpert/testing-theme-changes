<script>  

  (function() {
      // Defining the class triangle_digital_datalayer
      class triangle_digital_datalayer {
        constructor() {
          // Initializing dataLayer if not already defined
          window.dataLayer = window.dataLayer || []; 
          
          // Prefix for events name
          this.eventPrefix = 'sociomatic_';

          // Setting value to false to get non-formatted product ID
          this.formattedItemId = true; 

          // Data schema for ecommerce and dynamic remarketing
          this.dataSchema = {
            ecommerce: {
                show: true
            },
            dynamicRemarketing: {
                show: false,
                business_vertical: 'retail'
            }
          }

          // Selectors for adding to wishlist
          this.addToWishListSelectors = {
            'addWishListIcon': '',
            'gridItemSelector': '',
            'productLinkSelector': 'a[href*="/products/"]'
          }

          // Selectors for quick view
          this.quickViewSelector = {
            'quickViewElement': '',
            'gridItemSelector': '',
            'productLinkSelector': 'a[href*="/products/"]'
          }

          // Selector for mini cart button
          this.miniCartButton = [
            'a[href="/cart"]', 
          ];
          this.miniCartAppersOn = 'click';


          // Selectors for begin checkout buttons/links
          this.beginCheckoutButtons = [
            'input[name="checkout"]',
            'button[name="checkout"]',
            'a[href="/checkout"]',
            '.additional-checkout-buttons',
          ];

          // Selector for direct checkout button
          this.shopifyDirectCheckoutButton = [
            '.shopify-payment-button'
          ]

          // Setting value to true if Add to Cart redirects to the cart page
          this.isAddToCartRedirect = false;
          
          // Setting value to false if cart items increment/decrement/remove refresh page 
          this.isAjaxCartIncrementDecrement = true;
          

          // Caution: Do not modify anything below this line, as it may result in it not functioning correctly.
          this.cart = {{ cart | json }}
          this.countryCode = "{{ shop.address.country_code }}";
          this.collectData();  
          this.storeURL = "{{ shop.secure_url }}";
          localStorage.setItem('shopCountryCode', this.countryCode);
        }

        // Function to update cart
        updateCart() {
          fetch("/cart.js")
          .then((response) => response.json())
          .then((data) => {
            this.cart = data;
          });
        }

        // Function to create a debounced function
       debounce(delay) {         
          let timeoutId;
          return function(func) {
            const context = this;
            const args = arguments;
            
            clearTimeout(timeoutId);
            
            timeoutId = setTimeout(function() {
              func.apply(context, args);
            }, delay);
          };
        }

        // Function to collect data
        collectData() { 
            this.customerData();
            this.ajaxRequestData();
            this.searchPageData();
            this.miniCartData();
            this.beginCheckoutData();
  
            {% if template contains 'cart' %}
              this.viewCartPageData();
            {% endif %}
  
            {% if template contains 'product' %}
              this.productSinglePage();
            {% endif %}
  
            {% if template contains 'collection' %}
              this.collectionsPageData();
            {% endif %}
            
            this.addToWishListData();
            this.quickViewData();
            this.formData();
            this.phoneClickData();
            this.emailClickData();
        }        

        // Function to collect logged in customer data 
        customerData() {
            const currentUser = {};
            {% if customer %}
              currentUser.id = {{ customer.id }};
              currentUser.first_name = "{{ customer.first_name }}";
              currentUser.last_name = "{{ customer.last_name }}";
              currentUser.full_name = "{{ customer.name }}";
              currentUser.email = "{{ customer.email }}";
              currentUser.phone = "{{ customer.default_address.phone }}";
          
              {% if customer.default_address %}
                currentUser.address = {
                  address_summary: "{{ customer.default_address.summary }}",
                  address1: "{{ customer.default_address.address1 }}",
                  address2: "{{ customer.default_address.address2 }}",
                  city: "{{ customer.default_address.city }}",
                  street: "{{ customer.default_address.street }}",
                  zip_code: "{{ customer.default_address.zip }}",
                  company: "{{ customer.default_address.company }}",
                  country: "{{ customer.default_address.country.name }}",
                  country_code: "{{ customer.default_address.country_code }}",
                  province: "{{ customer.default_address.province }}"
                };
              {% endif %}
            {% endif %}

            if (currentUser.email) {
              currentUser.hash_email = "{{ customer.email | sha256 }}"
            }

            if (currentUser.phone) {
              currentUser.hash_phone = "{{ customer.phone | sha256 }}"
            }

            window.dataLayer = window.dataLayer || [];
            dataLayer.push({
              customer: currentUser
            });
        }

        // Function to handle ajax requests for add_to_cart, remove_from_cart, search
        ajaxRequestData() {
          const self = this;
          
          // Handling non-ajax add to cart
          if(this.isAddToCartRedirect) {
            document.addEventListener('submit', function(event) {
              const addToCartForm = event.target.closest('form[action="/cart/add"]');
              if(addToCartForm) {
                event.preventDefault();
                
                const formData = new FormData(addToCartForm);
            
                fetch(window.Shopify.routes.root + 'cart/add.js', {
                  method: 'POST',
                  body: formData
                })
                .then(response => {
                    window.location.href = "{{ routes.cart_url }}";
                })
                .catch((error) => {
                  console.error('Error:', error);
                });
              }
            });
          }
          
          // Overriding fetch function
          let originalFetch = window.fetch;
          let debounce = this.debounce(800);
          
          window.fetch = function () {
            return originalFetch.apply(this, arguments).then((response) => {
              if (response.ok) {
                let cloneResponse = response.clone();
                let requestURL = arguments[0];
                
                // Handling search event
                if(/.*\/search\/?.*\?.*q=.+/.test(requestURL) && !requestURL.includes('&requestFrom=uldt')) {   
                  const queryString = requestURL.split('?')[1];
                  const urlParams = new URLSearchParams(queryString);
                  const search_term = urlParams.get("q");

                  debounce(function() {
                    fetch(`${self.storeURL}/search/suggest.json?q=${search_term}&resources[type]=product&requestFrom=uldt`)
                      .then(res => res.json())
                      .then(function(data) {
                            const products = data.resources.results.products;
                            if(products.length) {
                              const fetchRequests = products.map(product =>
                                fetch(`${self.storeURL}/${product.url.split('?')[0]}.js`)
                                  .then(response => response.json())
                                  .catch(error => console.error('Error fetching:', error))
                              );

                              Promise.all(fetchRequests)
                                .then(products => {
                                    const items = products.map((product) => {
                                      return {
                                        product_id: product.id,
                                        product_title: product.title,
                                        variant_id: product.variants[0].id,
                                        variant_title: product.variants[0].title,
                                        vendor: product.vendor,
                                        total_discount: 0,
                                        final_price: product.price_min,
                                        product_type: product.type, 
                                        quantity: 1
                                      }
                                    });

                                    self.ecommerceDataLayer('search', {search_term, items});
                                })
                            }else {
                              self.ecommerceDataLayer('search', {search_term, items: []});
                            }
                      });
                  });
                }
                // Handling add to cart event
                else if (requestURL.includes("/cart/add")) {
                  cloneResponse.text().then((text) => {
                    let data = JSON.parse(text);

                    if(data.items && Array.isArray(data.items)) {
                      data.items.forEach(function(item) {
                         self.ecommerceDataLayer('add_to_cart', {items: [item]});
                      })
                    } else {
                      self.ecommerceDataLayer('add_to_cart', {items: [data]});
                    }
                    self.updateCart();
                  });
                }
                // Handling cart change event
                else if(requestURL.includes("/cart/change") || requestURL.includes("/cart/update")) {
                  
                   cloneResponse.text().then((text) => {
                     
                    let newCart = JSON.parse(text);
                    let newCartItems = newCart.items;
                    let oldCartItems = self.cart.items;

                    for(let i = 0; i < oldCartItems.length; i++) {
                      let item = oldCartItems[i];
                      let newItem = newCartItems.find(newItems => newItems.id === item.id);


                      if(newItem) {

                        if(newItem.quantity > item.quantity) {
                          // cart item increment
                          let quantity = (newItem.quantity - item.quantity);
                          let updatedItem = {...item, quantity}
                          self.ecommerceDataLayer('add_to_cart', {items: [updatedItem]});
                          self.updateCart(); 

                        }else if(newItem.quantity < item.quantity) {
                          // cart item decrement
                          let quantity = (item.quantity - newItem.quantity);
                          let updatedItem = {...item, quantity}
                          self.ecommerceDataLayer('remove_from_cart', {items: [updatedItem]});
                          self.updateCart(); 
                        }
                        

                      }else {
                        self.ecommerceDataLayer('remove_from_cart', {items: [item]});
                        self.updateCart(); 
                      }
                    }
                     
                  });
                }
              }
              return response;
            });
          }
          // End of fetch 


          // Overriding XMLHttpRequest
          var origXMLHttpRequest = XMLHttpRequest;
          XMLHttpRequest = function() {
            var requestURL;
    
            var xhr = new origXMLHttpRequest();
            var origOpen = xhr.open;
            var origSend = xhr.send;
            
            // Override the `open` function.
            xhr.open = function(method, url) {
                requestURL = url;
                return origOpen.apply(this, arguments);
            };
    
    
            xhr.send = function() {
    
                // Proceeding if the request URL matches what we're looking for.
                if (requestURL.includes("/cart/add") || requestURL.includes("/cart/change") || /.*\/search\/?.*\?.*q=.+/.test(requestURL)) {
        
                    xhr.addEventListener('load', function() {
                        if (xhr.readyState === 4) {
                            if (xhr.status >= 200 && xhr.status < 400) { 

                              if(/.*\/search\/?.*\?.*q=.+/.test(requestURL) && !requestURL.includes('&requestFrom=uldt')) {
                                const queryString = requestURL.split('?')[1];
                                const urlParams = new URLSearchParams(queryString);
                                const search_term = urlParams.get("q");

                                debounce(function() {
                                    fetch(`${self.storeURL}/search/suggest.json?q=${search_term}&resources[type]=product&requestFrom=uldt`)
                                      .then(res => res.json())
                                      .then(function(data) {
                                            const products = data.resources.results.products;
                                            if(products.length) {
                                              const fetchRequests = products.map(product =>
                                                fetch(`${self.storeURL}/${product.url.split('?')[0]}.js`)
                                                  .then(response => response.json())
                                                  .catch(error => console.error('Error fetching:', error))
                                              );
                
                                              Promise.all(fetchRequests)
                                                .then(products => {
                                                    const items = products.map((product) => {
                                                      return {
                                                        product_id: product.id,
                                                        product_title: product.title,
                                                        variant_id: product.variants[0].id,
                                                        variant_title: product.variants[0].title,
                                                        vendor: product.vendor,
                                                        total_discount: 0,
                                                        final_price: product.price_min,
                                                        product_type: product.type, 
                                                        quantity: 1
                                                      }
                                                    });
                
                                                    self.ecommerceDataLayer('search', {search_term, items});
                                                })
                                            }else {
                                              self.ecommerceDataLayer('search', {search_term, items: []});
                                            }
                                      });
                                  });

                              }

                              else if(requestURL.includes("/cart/add")) {
                                  const data = JSON.parse(xhr.responseText);

                                  if(data.items && Array.isArray(data.items)) {
                                    data.items.forEach(function(item) {
                                        self.ecommerceDataLayer('add_to_cart', {items: [item]});
                                      })
                                  } else {
                                    self.ecommerceDataLayer('add_to_cart', {items: [data]});
                                  }
                                  self.updateCart();
                                 
                               }else if(requestURL.includes("/cart/change")) {
                                 
                                  const newCart = JSON.parse(xhr.responseText);
                                  const newCartItems = newCart.items;
                                  let oldCartItems = self.cart.items;
              
                                  for(let i = 0; i < oldCartItems.length; i++) {
                                    let item = oldCartItems[i];
                                    let newItem = newCartItems.find(newItems => newItems.id === item.id);
              
              
                                    if(newItem) {
                                      if(newItem.quantity > item.quantity) {
                                        // cart item increment
                                        let quantity = (newItem.quantity - item.quantity);
                                        let updatedItem = {...item, quantity}
                                        self.ecommerceDataLayer('add_to_cart', {items: [updatedItem]});
                                        self.updateCart(); 
              
                                      }else if(newItem.quantity < item.quantity) {
                                        // cart item decrement
                                        let quantity = (item.quantity - newItem.quantity);
                                        let updatedItem = {...item, quantity}
                                        self.ecommerceDataLayer('remove_from_cart', {items: [updatedItem]});
                                        self.updateCart(); 
                                      }
                                      
              
                                    }else {
                                      self.ecommerceDataLayer('remove_from_cart', {items: [item]});
                                      self.updateCart(); 
                                    }
                                  }
                               }          
                            }
                        }
                    });
                }
    
                return origSend.apply(this, arguments);
            };
    
            return xhr;
          }; 
          // End of XMLHttpRequest
        }

        // Function for search event from search page
        searchPageData() {
          const self = this;
          let pageUrl = window.location.href;
          
          if(/.+\/search\?.*\&?q=.+/.test(pageUrl)) {   
            const queryString = pageUrl.split('?')[1];
            const urlParams = new URLSearchParams(queryString);
            const search_term = urlParams.get("q");
                
            fetch(`{{ shop.secure_url }}/search/suggest.json?q=${search_term}&resources[type]=product&requestFrom=uldt`)
            .then(res => res.json())
            .then(function(data) {
                  const products = data.resources.results.products;
                  if(products.length) {
                    const fetchRequests = products.map(product =>
                      fetch(`${self.storeURL}/${product.url.split('?')[0]}.js`)
                        .then(response => response.json())
                        .catch(error => console.error('Error fetching:', error))
                    );
                    Promise.all(fetchRequests)
                    .then(products => {
                        const items = products.map((product) => {
                            return {
                            product_id: product.id,
                            product_title: product.title,
                            variant_id: product.variants[0].id,
                            variant_title: product.variants[0].title,
                            vendor: product.vendor,
                            total_discount: 0,
                            final_price: product.price_min,
                            product_type: product.type, 
                            quantity: 1
                            }
                        });

                        self.ecommerceDataLayer('search', {search_term, items});
                    });
                  }else {
                    self.ecommerceDataLayer('search', {search_term, items: []});
                  }
            });
          }
        }

miniCartData() {
  // Check if mini cart button exists
  if(this.miniCartButton.length) {
    let self = this;
    // Change event trigger if mini cart appears on hover
    if(this.miniCartAppersOn === 'hover') {
      this.miniCartAppersOn = 'mouseenter';
    }
    // Add event listener for each mini cart button
    this.miniCartButton.forEach((selector) => {
      let miniCartButtons = document.querySelectorAll(selector);
      miniCartButtons.forEach((miniCartButton) => {
        miniCartButton.addEventListener(self.miniCartAppersOn, () => {
          // Track 'view_cart' event with cart data
          self.ecommerceDataLayer('view_cart', self.cart);
        });
      })
    });
  }
}

// Begin Checkout Data
// This function tracks the 'begin_checkout' event when the user begins the checkout process.
beginCheckoutData() {
  let self = this;
  // Add event listener for pointer down event
  document.addEventListener('pointerdown', () => {
    // Check if the target element is one of the begin checkout buttons
    let targetElement = event.target.closest(self.beginCheckoutButtons.join(', '));
    if(targetElement) {
      // Track 'begin_checkout' event with cart data
      self.ecommerceDataLayer('begin_checkout', self.cart);
    }
  });
}

// View Cart Page Data
// This function tracks the 'view_cart', 'add_to_cart', and 'remove_from_cart' events on the cart page.
viewCartPageData() {
  // Track 'view_cart' event with current cart data
  this.ecommerceDataLayer('view_cart', this.cart);

  // Track 'add_to_cart' or 'remove_from_cart' events when cart quantity changes
  if(!this.isAjaxCartIncrementDecrement) {
    const self = this;
    document.addEventListener('pointerdown', (event) => {
      // Check if the target element is a link that changes cart quantity
      const target = event.target.closest('a[href*="/cart/change?"]');
      if(target) {
        // Extract cart item details from the link URL
        const linkUrl = target.getAttribute('href');
        const queryString = linkUrl.split("?")[1];
        const urlParams = new URLSearchParams(queryString);
        const newQuantity = urlParams.get("quantity");
        const line = urlParams.get("line");
        const cart_id = urlParams.get("id");
        
        // Update the cart and track appropriate event based on quantity change
        if(newQuantity && (line || cart_id)) {
          let item = line ? {...self.cart.items[line - 1]} : self.cart.items.find(item => item.key === cart_id);
          let event = 'add_to_cart';
          if(newQuantity < item.quantity) {
            event = 'remove_from_cart';
          }
          let quantity = Math.abs(newQuantity - item.quantity);
          item['quantity'] = quantity;
          self.ecommerceDataLayer(event, {items: [item]});
        }
      }
    });
  }
}

// Product Single Page Data
// This function tracks the 'view_item' and 'begin_checkout' events on the product single page.
productSinglePage() {
  // Check if the template contains product information
  {% if template contains 'product' %}
  const item = {
    // Define product details for tracking
    product_id: {{ product.id | json }},
    variant_id: {{ product.selected_or_first_available_variant.id }},
    product_title: {{ product.title | json }},
    line_level_total_discount: 0,
    vendor: {{ product.vendor | json }},
    sku: {{ product.sku | json }},
    product_type: {{ product.type | json }},
    item_list_id: {{ product.collections[0].id | json }},
    item_list_name: {{ product.collections[0].title | json }},
    {% if product.selected_or_first_available_variant.title != "Default Title" %}
    variant_title: {{ product.selected_or_first_available_variant.title | json }},
    {% endif %}
    final_price: {{ product.selected_or_first_available_variant.price }},
    quantity: 1
  };
  
  const variants = {{ product.variants | json }}
  // Track 'view_item' event with product data
  this.ecommerceDataLayer('view_item', {items: [item]});

  // Add event listener for Shopify direct checkout button
  if(this.shopifyDirectCheckoutButton.length) {
    let self = this;
    document.addEventListener('pointerdown', (event) => {  
      let target = event.target;
      let checkoutButton = event.target.closest(this.shopifyDirectCheckoutButton.join(', '));

      // Track 'add_to_cart' and 'begin_checkout' events when Shopify direct checkout button is clicked
      if(checkoutButton && (variants || self.quickViewVariants)) {
        let checkoutForm = checkoutButton.closest('form[action*="/cart/add"]');
        if(checkoutForm) {
          let variant_id = null;
          let varientInput = checkoutForm.querySelector('input[name="id"]');
          let varientIdFromURL = new URLSearchParams(window.location.search).get('variant');
          let firstVarientId = item.variant_id;

          // Determine the variant ID to track with the events
          if(varientInput) {
            variant_id = parseInt(varientInput.value);
          } else if(varientIdFromURL) {
            variant_id = varientIdFromURL;
          } else if(firstVarientId) {
            variant_id = firstVarientId;
          }

          if(variant_id) {
            variant_id = parseInt(variant_id);
            let quantity = 1;
            let quantitySelector = checkoutForm.getAttribute('id');
            if(quantitySelector) {
              let quentityInput = document.querySelector('input[name="quantity"][form="'+quantitySelector+'"]');
              if(quentityInput) {
                quantity = +quentityInput.value;
              }
            }
            if(variant_id) {
              let variant = variants.find(item => item.id === +variant_id);
              if(variant && item) {
                item['variant_id'] = variant_id;
                item['variant_title'] = variant.title;
                item['final_price'] = variant.price;
                item['quantity'] = quantity;
                self.ecommerceDataLayer('add_to_cart', {items: [item]});
                self.ecommerceDataLayer('begin_checkout', {items: [item]});
              } else if(self.quickViewedItem) {                                  
                let variant = self.quickViewVariants.find(item => item.id === +variant_id);
                if(variant) {
                  self.quickViewedItem['variant_id'] = variant_id;
                  self.quickViewedItem['variant_title'] = variant.title;
                  self.quickViewedItem['final_price'] = parseFloat(variant.price) * 100;
                  self.quickViewedItem['quantity'] = quantity;
                  self.ecommerceDataLayer('add_to_cart', {items: [self.quickViewedItem]});
                  self.ecommerceDataLayer('begin_checkout', {items: [self.quickViewedItem]});
                }
              }
            }
          }
        }
      }
    });
  }
  
  {% endif %}
}

// Collections Page Data
// This function tracks the 'view_item_list' event on collections pages.
collectionsPageData() {
  var ecommerce = {
    'items': [
      // Loop through each product in the collection and define its details for tracking
      {% for product in collection.products %}
        {
          'product_id': {{ product.id | json }},
          'variant_id': {{ product.selected_or_first_available_variant.id | json }},
          'vendor': {{ product.vendor | json }},
          'total_discount': 0,
          'variant_title': {{ product.selected_or_first_available_variant.title | json }},
          'product_title': {{ product.title | json }},
          'final_price': Number({{ product.price }}),
          'product_type': {{ product.type | json }},
          'item_list_id': {{ collection.id | json }},
          'item_list_name': {{ collection.title | json }},
          'quantity': 1
        },
      {% endfor %}
    ]
  };

  // Set item list ID and name for tracking
  ecommerce['item_list_id'] = {{ collection.id | json }}
  ecommerce['item_list_name'] = {{ collection.title | json }}

  // Track 'view_item_list' event with collection data
  this.ecommerceDataLayer('view_item_list', ecommerce);
}

// Add to Wishlist Data
// This function tracks the 'add_to_wishlist' event when the user adds a product to their wishlist.
addToWishListData() {
  if(this.addToWishListSelectors && this.addToWishListSelectors.addWishListIcon) {
    const self = this;
    document.addEventListener('pointerdown', (event) => {
      let target = event.target;
      
      // Check if the target element is the wishlist icon
      if(target.closest(self.addToWishListSelectors.addWishListIcon)) {
        let pageULR = window.location.href.replace(/\?.+/, '');
        let requestURL = undefined;
  
        // Determine the product URL
        if(/\/products\/[^/]+$/.test(pageULR)) {
          requestURL = pageULR;
        } else if(self.addToWishListSelectors.gridItemSelector && self.addToWishListSelectors.productLinkSelector) {
          let itemElement = target.closest(self.addToWishListSelectors.gridItemSelector);
          if(itemElement) {
            let linkElement = itemElement.querySelector(self.addToWishListSelectors.productLinkSelector); 
            if(linkElement) {
              let link = linkElement.getAttribute('href').replace(/\?.+/g, '');
              if(link && /\/products\/[^/]+$/.test(link)) {
                requestURL = link;
              }
            }
          }
        }

        // Fetch product data and track 'add_to_wishlist' event
        if(requestURL) {
          fetch(requestURL + '.json')
            .then(res => res.json())
            .then(result => {
              let data = result.product;                    
              if(data) {
                let dataLayerData = {
                  product_id: data.id,
                  variant_id: data.variants[0].id,
                  product_title: data.title,
                  quantity: 1,
                  final_price: parseFloat(data.variants[0].price) * 100,
                  total_discount: 0,
                  product_type: data.product_type,
                  vendor: data.vendor,
                  variant_title: (data.variants[0].title !== 'Default Title') ? data.variants[0].title : undefined,
                  sku: data.variants[0].sku,
                }

                self.ecommerceDataLayer('add_to_wishlist', {items: [dataLayerData]});
              }
            });
        }
      }
    });
  }
}

// Quick View Data
// This function tracks the 'view_item' event when the user interacts with quick view functionality.
quickViewData() {
  if(this.quickViewSelector.quickViewElement && this.quickViewSelector.gridItemSelector && this.quickViewSelector.productLinkSelector) {
    const self = this;
    document.addEventListener('pointerdown', (event) => {
      let target = event.target;
      // Check if the target element is the quick view button
      if(target.closest(self.quickViewSelector.quickViewElement)) {
        let requestURL = undefined;
        let itemElement = target.closest(this.quickViewSelector.gridItemSelector );
        
        // Determine the product URL
        if(itemElement) {
          let linkElement = itemElement.querySelector(self.quickViewSelector.productLinkSelector); 
          if(linkElement) {
            let link = linkElement.getAttribute('href').replace(/\?.+/g, '');
            if(link && /\/products\/[^/]+$/.test(link)) {
              requestURL = link;
            }
          }
        }   
        
        // Fetch product data and track 'view_item' event
        if(requestURL) {
            fetch(requestURL + '.json')
              .then(res => res.json())
              .then(result => {
                let data = result.product;                    
                if(data) {
                  let dataLayerData = {
                    product_id: data.id,
                    variant_id: data.variants[0].id,
                    product_title: data.title,
                    quantity: 1,
                    final_price: parseFloat(data.variants[0].price) * 100,
                    total_discount: 0,
                    product_type: data.product_type,
                    vendor: data.vendor,
                    variant_title: (data.variants[0].title !== 'Default Title') ? data.variants[0].title : undefined,
                    sku: data.variants[0].sku,
                  }

                  // Track 'view_item' event with quick view data
                  self.ecommerceDataLayer('view_item', {items: [dataLayerData]});
                  self.quickViewVariants = data.variants;
                  self.quickViewedItem = dataLayerData;
                }
              });
          }
      }
    });

    // Track 'add_to_cart' and 'begin_checkout' events when Shopify direct checkout button is clicked from quick view
    {% unless template contains 'product' %}
    if(this.shopifyDirectCheckoutButton.length) {
      let self = this;
      document.addEventListener('pointerdown', (event) => {
        let target = event.target;
        let checkoutButton = event.target.closest(this.shopifyDirectCheckoutButton.join(', '));
        
        if(self.quickViewVariants && self.quickViewedItem && self.quickViewVariants.length && checkoutButton) {

          let checkoutForm = checkoutButton.closest('form[action*="/cart/add"]');
          if(checkoutForm) {
              let quantity = 1;
              let varientInput = checkoutForm.querySelector('input[name="id"]');
              let quantitySelector = checkoutForm.getAttribute('id');

              if(quantitySelector) {
                let quentityInput = document.querySelector('input[name="quantity"][form="'+quantitySelector+'"]');
                if(quentityInput) {
                    quantity = +quentityInput.value;
                }
              }

              if(varientInput) {
                  let variant_id = parseInt(varientInput.value);

                  if(variant_id) {
                      const variant = self.quickViewVariants.find(item => item.id === +variant_id);
                      if(variant && self.quickViewedItem) {
                          self.quickViewedItem['variant_id'] = variant_id;
                          self.quickViewedItem['variant_title'] = variant.title;
                          self.quickViewedItem['final_price'] = parseFloat(variant.price) * 100;
                          self.quickViewedItem['quantity'] = quantity; 

                          self.ec

ommerceDataLayer('add_to_cart', {items: [self.quickViewedItem]});
                          self.ecommerceDataLayer('begin_checkout', {items: [self.quickViewedItem]});
                      }
                  }
              }
          }

        }
      }); 
    }
    {% endunless %}
  }
}

// Ecommerce Data Layer
// This function constructs and pushes the data layer object for ecommerce events.
ecommerceDataLayer(event, data) {
  const self = this;
  dataLayer.push({ 'ecommerce': null });
  const dataLayerData = {
    "event": this.eventPrefix + event,
    'ecommerce': {
       'currency': this.cart.currency,
       'items': data.items.map((item, index) => {
         const dataLayerItem = {
            'index': index,
            'item_id': this.formattedItemId  ? `shopify_${this.countryCode}_${item.product_id}_${item.variant_id}` : item.product_id.toString(),
            'product_id': item.product_id.toString(),
            'variant_id': item.variant_id.toString(),
            'item_name': item.product_title,
            'quantity': item.quantity,
            'price': +((item.final_price / 100).toFixed(2)),
            'discount': item.total_discount ? +((item.total_discount / 100).toFixed(2)) : 0 
        }

        if(item.product_type) {
          dataLayerItem['item_category'] = item.product_type;
        }
        
        if(item.vendor) {
          dataLayerItem['item_brand'] = item.vendor;
        }
       
        if(item.variant_title && item.variant_title !== 'Default Title') {
          dataLayerItem['item_variant'] = item.variant_title;
        }
      
        if(item.sku) {
          dataLayerItem['sku'] = item.sku;
        }

        if(item.item_list_name) {
          dataLayerItem['item_list_name'] = item.item_list_name;
        }

        if(item.item_list_id) {
          dataLayerItem['item_list_id'] = item.item_list_id.toString()
        }

        return dataLayerItem;
      })
    }
  }

  // Calculate and add total value to the data layer
  if(data.total_price !== undefined) {
    dataLayerData['ecommerce']['value'] =  +((data.total_price / 100).toFixed(2));
  } else {
    dataLayerData['ecommerce']['value'] = +(dataLayerData['ecommerce']['items'].reduce((total, item) => total + (item.price * item.quantity), 0)).toFixed(2);
  }
  
  // Add item list ID and name to the data layer if available
  if(data.item_list_id) {
    dataLayerData['ecommerce']['item_list_id'] = data.item_list_id;
  }
  
  if(data.item_list_name) {
    dataLayerData['ecommerce']['item_list_name'] = data.item_list_name;
  }

  // Add search term to the data layer if available
  if(data.search_term) {
    dataLayerData['search_term'] = data.search_term;
  }

  // Add dynamic remarketing data to the data layer if enabled
  if(self.dataSchema.dynamicRemarketing && self.dataSchema.dynamicRemarketing.show) {
    dataLayer.push({ 'dynamicRemarketing': null });
    dataLayerData['dynamicRemarketing'] = {
        value: dataLayerData.ecommerce.value,
        items: dataLayerData.ecommerce.items.map(item => ({id: item.item_id, google_business_vertical: self.dataSchema.dynamicRemarketing.business_vertical}))
    }
  }

  // Push the constructed data layer object
  if(!self.dataSchema.ecommerce ||  !self.dataSchema.ecommerce.show) {
    delete dataLayerData['ecommerce'];
  }

  dataLayer.push(dataLayerData);
}

// Form Data
// This function tracks form submissions for contact forms and newsletter signups.
formData() {
  const self = this;
  document.addEventListener('submit', function(event) {
    let targetForm = event.target.closest('form[action^="/contact"]');
    if(targetForm) {
      const formData = {
        form_location: window.location.href,
        form_id: targetForm.getAttribute('id'),
        form_classes: targetForm.getAttribute('class')
      };
                    
      let formType = targetForm.querySelector('input[name="form_type"]');
      let inputs = targetForm.querySelectorAll("input:not([type=hidden]):not([type=submit]), textarea, select");
      
      inputs.forEach(function(input) {
        var inputName = input.name;
        var inputValue = input.value;
        
        if (inputName && inputValue) {
          var matches = inputName.match(/\[(.*?)\]/);
          if (matches && matches.length > 1) {
             var fieldName = matches[1];
             formData[fieldName] = input.value;
          }
        }
      });
      
      // Track form submission event based on form type
      if(formType && formType.value === 'customer') {
        dataLayer.push({ event: self.eventPrefix + 'newsletter_signup', ...formData});
      } else if(formType && formType.value === 'contact') {
        dataLayer.push({ event: self.eventPrefix + 'contact_form_submit', ...formData});
      }
    }
  });
}

       // phone_number_click event
        phoneClickData() {
          const self = this; 
          document.addEventListener('click', function(event) {
            let target = event.target.closest('a[href^="tel:"]');
            if(target) {
              let phone_number = target.getAttribute('href').replace('tel:', '');
              dataLayer.push({
                event: self.eventPrefix + 'phone_number_click',
                page_location: window.location.href,
                link_classes: target.getAttribute('class'),
                link_id: target.getAttribute('id'),
                phone_number
              })
            }
          });
        }
  
        // email_click event
        emailClickData() {
          const self = this; 
          document.addEventListener('click', function(event) {
            let target = event.target.closest('a[href^="mailto:"]');
            if(target) {
              let email_address = target.getAttribute('href').replace('mailto:', '');
              dataLayer.push({
                event: self.eventPrefix + 'email_click',
                page_location: window.location.href,
                link_classes: target.getAttribute('class'),
                link_id: target.getAttribute('id'),
                email_address
              })
            }
          });
        }
      } 
      // end triangle_digital_datalayer

      document.addEventListener('DOMContentLoaded', function() {
        try{
          new triangle_digital_datalayer();
        }catch(error) {
          console.log(error);
        }
      });
    
  })();
</script>